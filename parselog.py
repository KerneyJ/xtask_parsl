# This file contains a series of functions used to 
# parse the log files generated by parsl and prof 
# files generated by cProfile used with parsl

import datetime
import math
import os
import sys

from config import CONFIGS # necessary for parse dir method

# parse worker log
# returns a task list, each tuple contains informataion from the log file 
def parse_task(file):
    task_list = []
    while True:
        line = file.readline()
        if not line:
            break
        info = line.split(" ")
        info[0] = " ".join([info[0], info.pop(1)]) # join the date infomration
        info = [s for s in info if s] # remove empty strings
        info.pop(3) # remove [INFO]
        if "task" in info[len(info)-2]:
            info[len(info)-1] = " ".join([info[len(info)-2], info.pop().strip("\n")]) # join the task and its number in the log file
            task_list.append(info) # add that parsed string

    return task_list

# parse a directory of parsl logs; takes in a directory outputs a dictionary with keys being the name of the 
# log directory and values being the path to the worker log files 
# Example input directory: runinfo
def parse_dir(directory):
    config_names = [k for k in CONFIGS.keys()]
    dirtbl = {}
    for d in os.listdir(directory):
        for cnfg in config_names:
            block_dirs = [bd for bd in os.listdir(directory + "/" + d + "/" + cnfg) if "block" in bd]
            wkrdirs = []
            for block_dir in block_dirs:
                wkrdir = [f"{directory}/{d}/{cnfg}/{block_dir}/{wd}" for wd in os.listdir(directory + "/" + d + "/" + cnfg + "/" + block_dir)]
                wkrdirs += wkrdir
            dirtbl.update({f"{d}_{cnfg}": wkrdirs})
    return dirtbl

# merge the task list of workers
def merge_tsklst(task_lists):
    task_list = []
    for tsklst in task_lists:
        task_list += tsklst
    task_list.sort(key=lambda task: int(task[4].split()[1]))
    return task_list

# calculate throughput, assumes task_list is sorted
def calc_thrghpt(task_list):
    start = datetime.datetime.strptime(task_list[0][0], "%Y-%m-%d %H:%M:%S.%f") # when it recieved its first task
    task_list = [task for task in task_list if task[3] == "Completed"] # remove all the logs of "recieved task" 
    end = datetime.datetime.strptime(task_list[len(task_list)-1][0], "%Y-%m-%d %H:%M:%S.%f")
    delta = datetime.datetime.timestamp(end) - datetime.datetime.timestamp(start)
    if not delta:
        return math.inf 
    num_ops = len(task_list)
    return num_ops / delta

# takes directory of worker log files and outputs a dictionary of the workers
def make_wkrtbl(logdir):
    wkrtbl = {}
    for f in os.listdir(logdir):
        if "worker" in f:
            wkrtbl.update({f[0:len(f)-4]: logdir + "/" + f})
 
    return wkrtbl

if __name__ == "__main__":
    # Example using the functions above 
    dirtbl = parse_dir("latop_benchmark")
    for log, wkrdirs in dirtbl.items():
        print(f"log: {log}")
        for wkrdir in wkrdirs:
            wkrtbl = make_wkrtbl(wkrdir)
            total_tsklst = []
            for wkr, path in wkrtbl.items():
                print(f"\t{wkr} throughput: ", end=' ')
                with open(path) as wkr_file:
                    worker_tsklst = parse_task(wkr_file)
                    if not worker_tsklst:
                        print("N/A did not recieve any task")
                        continue
                    total_tsklst.append(worker_tsklst)
                    print(calc_thrghpt(worker_tsklst))
            total_tsklst = merge_tsklst(total_tsklst)
            print(f"\ttotal throughput: {calc_thrghpt(total_tsklst)}")


